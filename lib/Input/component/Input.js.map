{"version":3,"sources":["../../../src/Input/component/Input.js"],"names":[],"mappings":"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","file":"Input.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport classNames from 'classnames'\nimport './css/_input.sass'\n\nexport default class Input extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            _value: this.props.value || '',\n            _type: this.props.type || 'text',\n            _required: this.props.required || false,\n            _active: false,\n        }\n    }\n    static contextTypes = {\n      formsy: React.PropTypes.object // What about required?\n    }\n\n    componentWillMount(){\n        this.context.formsy.attachToForm(this);\n    }\n    componentWillUnmount () {\n        this.context.formsy.detachFromForm(this);\n    }\n    setValue(value){\n        this.setState({_value: value}, function(){\n            this.isActive()\n        })\n    }\n\n    getValue() {\n        return this.state._value;\n    }\n\n    clearValue(){\n        this.setValue('');\n    }\n\n    isActive(){\n        !!this.getValue() ? this.setState({_active: true}) : this.setState({_active: false})\n    }\n\n    changeValue(e) {\n        this.setValue(e.target.value);\n    }\n\n    iconType(type) {\n        const iconList = ['phone', 'code', 'token', 'lock'];\n        let concatName = classNames(\n            'general-icon',\n            {[`icon-${type}-active`]: this.state.active},\n            {[`icon-${type}`]: !this.state.active}\n        )\n        return (\n            iconList.indexOf(type) === -1 ?\n            <div className = 'icon-none'>{type}</div>\n            :\n            <div className = {concatName}></div>\n        )\n    }\n\n    switchInputType(){\n        let type = this.state._type\n        type = type == 'password' ? 'text': 'password';\n        this.setState({_type: type})\n    }\n    operationType(type){\n        switch (type) {\n            case 'close':\n                if(!!this.getValue()){\n                    return <div className ='operation-clear general-operation' onClick = {() => this.clearValue()}></div>\n                }\n                break\n            case 'eye':\n                let concatName = classNames(\n                    'general-operation',\n                    {'operation-hide': this.state._type == 'password'},\n                    {'operation-show': this.state._type == 'text'},\n                )\n                return (\n                    <div className= {concatName} onClick = {() => this.switchInputType()}></div>\n                )\n            default:\n        }\n    }\n\n    render() {\n        const { placeholder, type, name, icon, operation, className }  = this.props;\n\n        let concatName = classNames(\n            'general-input',\n            {'actives': this.state.active},\n            {[className]: !!className}\n        )\n\n        return (\n            <div className={ concatName }>\n                { this.iconType(icon)}\n                <input\n                    type={this.state._type}\n                    name={name}\n                    value={this.getValue()}\n                    onChange={(e) => this.changeValue(e)}\n                    placeholder= { placeholder}\n                />\n                { this.operationType(operation)}\n            </div>\n        );\n    }\n};\n"]}